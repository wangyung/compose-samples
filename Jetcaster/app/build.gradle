/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

kapt {
    correctErrorTypes = true
    useBuildCache = true
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId 'com.example.jetcaster'
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"
                ]
            }
        }
    }

    packagingOptions {
        // The Rome library JARs embed some internal utils libraries in nested JARs.
        // We don't need them so we exclude them in the final package.
        exclude "/*.jar"
    }

    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerVersion versions.kotlin
        kotlinCompilerExtensionVersion versions.androidx.compose
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutine}"

    implementation "androidx.core:core-ktx:${versions.androidx.core}"
    implementation "androidx.palette:palette:${versions.androidx.palette}"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.androidx.lifecycle}"

    //// Compose
    implementation "androidx.compose.ui:ui:${versions.androidx.compose}"
    implementation "androidx.compose.foundation:foundation-layout:${versions.androidx.compose}"
    implementation "androidx.compose.animation:animation:${versions.androidx.compose}"

    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:${versions.androidx.compose}"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:${versions.androidx.compose}"
    // Material Design
    implementation "androidx.compose.material:material:${versions.androidx.compose}"
    // Material design icons
    implementation "androidx.compose.material:material-icons-core:${versions.androidx.compose}"
    implementation "androidx.compose.material:material-icons-extended:${versions.androidx.compose}"
    // Integration with observables
    implementation "androidx.compose.runtime:runtime:${versions.androidx.compose}"
    implementation "androidx.compose.runtime:runtime-livedata:${versions.androidx.compose}"
    //// Compose

    implementation "dev.chrisbanes.accompanist:accompanist-coil:${versions.coil}"
    implementation "dev.chrisbanes.accompanist:accompanist-insets:${versions.coil}"

    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"

    implementation "com.rometools:rome:${versions.rome}"
    implementation "com.rometools:rome-modules:${versions.rome}"

    implementation "androidx.room:room-runtime:${versions.androidx.room}"
    implementation "androidx.room:room-ktx:${versions.androidx.room}"
    kapt "androidx.room:room-compiler:${versions.androidx.room}"

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:${versions.jdkDesugaring}"
}
