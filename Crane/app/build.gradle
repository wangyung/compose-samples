/*
 * Copyright 2019 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//import com.example.crane.buildsrc.Libs

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
}

// Reads the Google maps key that is used in the AndroidManifest
Properties properties = new Properties()
if (rootProject.file("local.properties").exists()) {
    properties.load(rootProject.file("local.properties").newDataInputStream())
}

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "androidx.compose.samples.crane"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.compose.samples.crane.CustomTestRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }

        manifestPlaceholders = [ googleMapsKey : properties.getProperty("google.maps.key", "") ]
    }

    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
         compose true

        // Disable unused AGP features
        buildConfig false
        aidl false
        renderScript false
        resValues false
        shaders false
    }

    composeOptions {
        kotlinCompilerVersion versions.kotlin
        kotlinCompilerExtensionVersion versions.androidx.compose
    }

    packagingOptions {
        // Multiple dependency bring these files in. Exclude them to enable
        // our test APK to build (has no effect on our AARs)
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutine}"
    implementation "com.google.android.libraries.maps:maps:${versions.googlemaps}"
    implementation "com.google.maps.android:maps-v3-ktx:${versions.googlemapsKtx}"

    //// Compose
    implementation "androidx.compose.ui:ui:${versions.androidx.compose}"
    implementation "androidx.compose.foundation:foundation-layout:${versions.androidx.compose}"
    implementation "androidx.compose.animation:animation:${versions.androidx.compose}"

    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:${versions.androidx.compose}"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:${versions.androidx.compose}"
    // Material Design
    implementation "androidx.compose.material:material:${versions.androidx.compose}"
    // Material design icons
    implementation "androidx.compose.material:material-icons-core:${versions.androidx.compose}"
    implementation "androidx.compose.material:material-icons-extended:${versions.androidx.compose}"
    // Integration with observables
    implementation "androidx.compose.runtime:runtime:${versions.androidx.compose}"
    implementation "androidx.compose.runtime:runtime-livedata:${versions.androidx.compose}"
    //// Compose

    implementation "dev.chrisbanes.accompanist:accompanist-coil:${versions.coil}"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.androidx.lifecycle}"
    implementation "com.google.dagger:hilt-android:${versions.hilt}"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:${versions.androidx.hilt}"
    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:${versions.injectAssistant}"

    kapt "com.google.dagger:hilt-compiler:${versions.hilt}"
    kapt "androidx.hilt:hilt-compiler:${versions.androidx.hilt}"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:${versions.injectAssistant}"

    androidTestImplementation "androidx.test.ext:junit-ktx:${versions.androidx.junit}"
    androidTestImplementation "androidx.test:runner:${versions.androidx.junit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.androidx.espresso}"
    androidTestImplementation "androidx.test:rules:${versions.androidx.rules}"
    androidTestImplementation "androidx.test.ext:junit-ktx:${versions.androidx.junit_ktx}"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutine}"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:${versions.androidx.compose}"
    androidTestImplementation "com.google.dagger:hilt-android:${versions.hilt}"
    androidTestImplementation "androidx.hilt:hilt-lifecycle-viewmodel:${versions.androidx.hilt}"
    androidTestImplementation "com.google.dagger:hilt-android-testing:${versions.hilt}"
    kaptAndroidTest "com.google.dagger:hilt-compiler:${versions.hilt}"
    kaptAndroidTest "androidx.hilt:hilt-compiler:${versions.androidx.hilt}"
    kaptAndroidTest "com.squareup.inject:assisted-inject-processor-dagger2:${versions.injectAssistant}"
}
